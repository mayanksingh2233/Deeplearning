# -*- coding: utf-8 -*-
"""DCGAN image generation on mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZM_mszC_g7A1LLoH9eYeQe69dKRxoKan
"""

import imageio
import tensorflow as tf
import glob
import matplotlib.pyplot as plt
import numpy as np
import os
import PIL
from tensorflow.keras import layers
import time
from IPython import display

(train_images,train_labels),(_ , _) = tf.keras.datasets.mnist.load_data()

train_images=train_images.reshape(train_images.shape[0],28,28,1)
train_images=train_images.astype('float32')
train_images=(train_images-127.5)/127.5 #Normalize the images to [-1,1]

BUFFER_SIZE = 60000
BATCH_SIZE=256

#batch and shuffle the data
train_dataset = tf.data.Dataset.from_tensor_slices(train_images).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)

# Creating Generator model

def make_generator_model():
  model=tf.keras.Sequential()
  model.add(layers.Dense(7*7*256,use_bias=False,input_shape=(100,)))
  model.add(layers.BatchNormalization())
  model.add(layers.LeakyReLU())

  model.add(layers.Reshape(target_shape=(7,7,256)))
  assert model.output_shape == (None,7,7,256) #Note: None is the batch size
  
  model.add(layers.Conv2DTranspose(filters=128,kernel_size=(5,5),strides=(1,1),padding='same',use_bias=False))
  assert model.output_shape == (None,7,7,128)
  model.add(layers.BatchNormalization())
  model.add(layers.LeakyReLU())

  model.add(layers.Conv2DTranspose(filters=64,kernel_size=(5,5),strides=(2,2),padding='same',use_bias=False))
  assert model.output_shape == (None,14,14,64)
  model.add(layers.BatchNormalization())
  model.add(layers.LeakyReLU())

  model.add(layers.Conv2DTranspose(filters=1,kernel_size=(5,5),strides=(2,2),padding='same',use_bias=False,activation='tanh'))
  assert model.output_shape == (None,28,28,1)

  return model

# Use the (as yet untrained) generator to create an image

generator=make_generator_model()
noise=tf.random.normal([1,100])
generator_image = generator(noise,training=False)
plt.imshow(generator_image[0,:,:,0],cmap='gray')

# Creating Discriminator
# The discriminator is a CNN-based image classifier
def make_discrimator_model():
  model=tf.keras.Sequential()
  model.add(layers.Conv2D(filters=64,kernel_size=(5,5),strides=(2,2),padding='same',input_shape=[28,28,1]))
  
  model.add(layers.LeakyReLU())
  model.add(layers.Dropout(rate=0.3))
  
  model.add(layers.Conv2D(filters=(128),kernel_size=(5,5),strides=(2,2),padding='same'))
  model.add(layers.LeakyReLU())
  model.add(layers.Dropout(rate=0.3))

  model.add(layers.Flatten())
  model.add(layers.Dense(1))
  return model

# Use the (as yet untrained) discriminator to classify the generated images as real or fake. 
# The model will be trained to output positive values for real images, and negative values for fake images.
discriminator=make_discrimator_model()
decision=discriminator(generator_image) # generator_image: the image is generator by the generator.
print(decision)

"""# Define loss functions and optimizers for both models.

"""

# This method returns a helper function to compute cross entropy loss
cross_entropy=tf.keras.losses.BinaryCrossentropy(from_logits=True)

"""## Discriminator loss


"""

#This method quantifies how well the discriminator is able to distinguish real images from fakes. 
# It compares the discriminator's predictions on real images to an array of 1s, 
# and the discriminator's predictions on fake (generated) images to an array of 0s.
def discrimator_loss(real_output,fake_output):
  real_loss=cross_entropy(tf.ones_like(real_output),real_output)
  fake_loss=cross_entropy(tf.zeros_like(fake_output),fake_output)
  total_loss=real_loss + fake_loss
  return total_loss

"""# Generator loss"""

# The generator's loss quantifies how well it was able to trick the discriminator. 
# Intuitively, if the generator is performing well, the discriminator will classify the fake images as real (or 1).
# Here, compare the discriminators decisions on the generated images to an array of 1s.

def generator_loss(fake_output):
  return cross_entropy(tf.ones_like(fake_output),fake_output)

# The discriminator and the generator optimizers are different since you will train two networks separately.
generator_optimizer=tf.keras.optimizers.Adam(1e-4)
discriminator_optimizer=tf.keras.optimizers.Adam(1e-4)

"""# Save Checkpoints"""

#This notebook also demonstrates how to save and restore models, which can be helpful in case a long running training task is interrupted.
checkpoint_dir = './training_checkpoints'
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt")
checkpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,
                                 discriminator_optimizer=discriminator_optimizer,
                                 generator=generator,
                                 discriminator=discriminator)

"""# Define the training loop"""

EPOCHS = 50
noise_dim = 100
num_examples_to_generate = 16

# You will reuse this seed overtime (so it's easier)
# to visualize progress in the animated GIF)
seed = tf.random.normal([num_examples_to_generate, noise_dim])

#The training loop begins with generator receiving a random seed as input. That seed is used to produce an image. 
#The discriminator is then used to classify real images (drawn from the training set) and fakes images (produced by the generator). 
#The loss is calculated for each of these models, and the gradients are used to update the generator and discriminator.

# Notice the use of `tf.function`
# This annotation causes the function to be "compiled".
@tf.function
def train_step(images):
  noise=tf.random.normal([BATCH_SIZE,noise_dim])

  with tf.GradientTape() as gen_tape,tf.GradientTape() as disc_tape:
    generator_image=generator(noise , training=True)

    real_output=discriminator(images , training=True)
    fake_output=discriminator(generator_image , training=True)

    gen_loss=generator_loss(fake_output)
    disc_loss=discrimator_loss(real_output, fake_output)
  gradients_of_generator=gen_tape.gradient(gen_loss , generator.trainable_variables)
  gradients_of_discriminator=disc_tape.gradient(disc_loss , discriminator.trainable_variables)

  generator_optimizer.apply_gradients(zip(gradients_of_generator , generator.trainable_variables))
  discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator , discriminator.trainable_variables))

def train(dataset , epochs):
  for epoch in range(epochs):
    start= time.time()

    for image_batch in dataset:
      train_step(image_batch)

    # produce image for the GIF as you go
    display.clear_output(wait=True)
    generate_and_save_image(generator , epoch+1 , seed)

    # save the model every 15 epochs
    if(epoch+1) % 15 == 0:
      checkpoint.save(file_prefix= checkpoint_prefix)

    print('Time for epoch {} is {} sec'.format(epoch + 1, time.time()-start))

  #Generator after the final epoch
  display.clear_output(wait=True)
  generate_and_save_image(generator , epochs , seed)

"""# Generate and save images"""

#Generate and save images
def generate_and_save_image(model , epoch , test_input):
   # Notice `training` is set to False.
  # This is so all layers run in inference mode (batchnorm).
  prediction=model(test_input , training=False)

  fig=plt.figure(figsize=(4,4))
  for i in range(prediction.shape[0]):
    plt.subplot(4,4,i+1)
    plt.imshow(prediction[i, :, :, 0]*127.5 + 127.5 , cmap='gray')
    plt.axis('off')
  plt.savefig('image_at_epoch_{:04d}.png'.format(epoch))
  plt.show()

train(train_dataset,EPOCHS)

checkpoint.restore(tf.train.latest_checkpoint(checkpoint_dir))

# Display a single image using the epoch number
def display_image(epoch_no):
  return PIL.Image.open('image_at_epoch_{:04d}.png'.format(epoch_no))

display_image(EPOCHS)

#Use imageio to create an animated gif using the images saved during training
anim_file='dcgan.gif'

with imageio.get_writer(anim_file , mode='I')as writer:
  filenames = glob.glob('image*.png')
  filenames = sorted(filenames)
  for filename in filenames:
    image = imageio.imread(filename)
    writer.append_data(image)
  image = imageio.imread(filename)
  writer.append_data(image)

pip install -q git+https://github.com/tensorflow/docs

import tensorflow_docs.vis.embed as embed
embed.embed_file(anim_file)

