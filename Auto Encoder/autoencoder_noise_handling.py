# -*- coding: utf-8 -*-
"""Autoencoder noise handling

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D60o8OJ8r9zfmUW8aE8m-CJSkYd5rxhZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,precision_score,recall_score
from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras import losses,layers
from tensorflow.keras.models import Model

(x_train,_),(x_test,_)=fashion_mnist.load_data()

x_train=x_train.astype('float32')/255
x_test=x_test.astype('float32')/255

x_train.shape

x_train=x_train[...,tf.newaxis]
x_test=x_test[...,tf.newaxis]

x_train.shape

noise_factor=0.2
x_train_noisy=x_train+noise_factor*tf.random.normal(shape=(x_train.shape))
x_test_noisy=x_test+noise_factor*tf.random.normal(shape=(x_test.shape))

x_train_noisy=tf.clip_by_value(x_train_noisy,clip_value_max=1.,clip_value_min=0.)
x_test_noisy=tf.clip_by_value(x_test_noisy,clip_value_min=0.,clip_value_max=1.)

n=10
plt.figure(figsize=(20,2))
for i in range(n):
  ax=plt.subplot(1,n,i+1)
  plt.title('original + noise')
  plt.imshow(tf.squeeze(x_train_noisy[i]))
  plt.gray()
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)
plt.show()

class Denoise(Model):
  def __init__(self):
    super(Denoise,self).__init__()
    self.encoder=tf.keras.Sequential([layers.Input(shape=(28,28,1)),
                                      layers.Conv2D(filters=16,kernel_size=(3,3),strides=2,padding='same',activation='relu'),
                                      layers.Conv2D(filters=8,kernel_size=(3,3),strides=2,padding='same',activation='relu')])
    self.decoder=tf.keras.Sequential([layers.Conv2DTranspose(filters=8,kernel_size=3,padding='same',activation='relu',strides=2),
                                      layers.Conv2DTranspose(filters=16,kernel_size=3,strides=2,activation='relu',padding='same'),
                                      layers.Conv2D(filters=1,kernel_size=(3,3),padding='same',activation='sigmoid')])
  def call(self,x):
    encoder=self.encoder(x)
    decoder=self.decoder(encoder)
    return decoder
autoencoder=Denoise()

autoencoder.compile(optimizer='adam',loss=losses.MeanSquaredError(),metrics='accuracy')
autoencoder.fit(x_train_noisy,x_train,batch_size=150,epochs=10,shuffle=True,validation_data=(x_test_noisy,x_test))

autoencoder.encoder.summary()

autoencoder.decoder.summary()

encoder_imgs=autoencoder.encoder(x_test).numpy()
decoder_imgs=autoencoder.decoder(encoder_imgs).numpy()

n=10
plt.figure(figsize=(20,4))
for i in range(n):
  #display noisy images
  ax=plt.subplot(2,n,i+1)
  plt.imshow(tf.squeeze(x_test_noisy[i]))
  plt.title('original + noise')
  plt.gray()
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)

  #display reconstructed images
  bx=plt.subplot(2,n,i+1+n)
  plt.imshow(tf.squeeze(decoder_imgs[i]))
  plt.title('reconstructed')
  plt.gray()
  bx.get_xaxis().set_visible(False)
  bx.get_yaxis().set_visible(False)
plt.show()

