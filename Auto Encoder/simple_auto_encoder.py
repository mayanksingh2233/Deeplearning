# -*- coding: utf-8 -*-
"""Simple Auto Encoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IMpVNWbScdvBR_J6TEA4rDcCHh26UBOW
"""

import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.keras import layers,losses
from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.models import Model
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,precision_score,recall_score

(x_train,_),(x_test,_)=fashion_mnist.load_data()

print(x_train.shape)
print(x_test.shape)
x_train

x_train=x_train.astype('float32')/255
x_test=x_test.astype('float32')/255

print(x_train.shape)
print(x_test.shape)
x_train

laten_dim=64
class Autoencoder(Model):
  def __init__(self,laten_dim):
    super(Autoencoder,self).__init__()
    self.laten_dim=laten_dim
    self.encoder=tf.keras.Sequential([
                                      layers.Flatten(),
                                      layers.Dense(units=laten_dim,activation='relu')])
    self.decoder=tf.keras.sequential([
                                      layers.Dense(units=784,activation='sigmoid'),
                                      layers.Reshape(target_shape=(28,28))])
  def call(self,x):
    encoded=self.encoder(x)
    decoded=self.decoded(encoded)
    return decoded
  autoencoder = Autoencoder(laten_dim)

autoencoder.compile(optimizer='adam',loss=losses.MeanSquaredError())

autoencoder.fit(x_train,x_train,batch_size=100,epochs=10,shuffle=True,validation_data=(x_test,x_test))

encoder_img=autoencoder.encoder(x_test).numpy()
decoder_img=autoencoder.decoder(encoder_img).numpy()

n=10
plt.figure(figsize=(20,4))
for i in range(n):
  #display_original
  ax=plt.subplot(2,n,i+1)
  plt.imshow(x_test[i])
  plt.title('originals')
  plt.gray()
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)
  # display reconstructed
  ax=plt.subplot(2,n,i+1+n)
  plt.imshow(decoder_img[i])
  plt.title('reconstructed')
  plt.gray()
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)

